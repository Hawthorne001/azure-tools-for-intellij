# GitHub Actions Workflow created for handling the release process based on the draft release prepared with the Build workflow.
# Running the publishPlugin task requires all following secrets to be provided: PUBLISH_TOKEN, PRIVATE_KEY, PRIVATE_KEY_PASSWORD, CERTIFICATE_CHAIN.
# See https://plugins.jetbrains.com/docs/intellij/plugin-signing.html for more information.

name: Release
on:
  release:
    types: [prereleased, released]

env:
  # Branches from the https://github.com/microsoft/azure-maven-plugins and https://github.com/microsoft/azure-tools-for-java repositories
  ENDGAME_VERSION: endgame-202406

jobs:

  # Prepare environment and build the plugin
  build-dependencies:
    if: ${{ startsWith(github.event.release.tag_name, 'v4') }}
    name: Build Dependencies
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
          path: azure-tools-for-intellij

      # Setup Java environment
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Build Utils library
      - name: Build Utils
        working-directory: ${{ github.workspace }}/azure-tools-for-intellij
        shell: bash
        run: ./mvnw install -DskipTests -f Utils/pom.xml

      # Upload azure artifacts
      - name: Upload azure artifacts
        uses: actions/upload-artifact@v4
        with:
          name: azure-artifacts
          path: /home/runner/.m2/repository/com/microsoft/azure/
          retention-days: 1

      # Upload hdinsight artifacts
      - name: Upload hdinsight artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hdinsight-artifacts
          path: /home/runner/.m2/repository/com/microsoft/hdinsight/
          retention-days: 1

      # Upload azuretools artifacts
      - name: Upload azuretools artifacts
        uses: actions/upload-artifact@v4
        with:
          name: azuretools-artifacts
          path: /home/runner/.m2/repository/com/microsoft/azuretools/
          retention-days: 1

  # Prepare and publish the plugin to JetBrains Marketplace repository
  release:
    if: ${{ startsWith(github.event.release.tag_name, 'v4') }}
    needs: [ build-dependencies ]
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      # Download azure artifacts
      - name: Download library artifacts
        uses: actions/download-artifact@v4
        with:
          name: azure-artifacts
          path: /home/runner/.m2/repository/com/microsoft/azure/

      # Download hdinsight artifacts
      - name: Download library artifacts
        uses: actions/download-artifact@v4
        with:
          name: hdinsight-artifacts
          path: /home/runner/.m2/repository/com/microsoft/hdinsight/

      # Download azuretools artifacts
      - name: Download library artifacts
        uses: actions/download-artifact@v4
        with:
          name: azuretools-artifacts
          path: /home/runner/.m2/repository/com/microsoft/azuretools/

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          build-root-directory: ${{ github.workspace }}/PluginsAndFeatures/azure-toolkit-for-rider
          gradle-home-cache-cleanup: true

      # Setup .NET 8 environment for the next steps
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
          ${{ github.event.release.body }}
          EOM
          )"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Update Unreleased section with the current release note
      - name: Patch Changelog
        if: ${{ steps.properties.outputs.changelog != '' }}
        working-directory: ${{ github.workspace }}/PluginsAndFeatures/azure-toolkit-for-rider
        env:
          CHANGELOG: ${{ steps.properties.outputs.changelog }}
        run: |
          ./gradlew patchChangelog --release-note="$CHANGELOG"

      # Publish the plugin to JetBrains Marketplace
      - name: Publish Plugin
        working-directory: ${{ github.workspace }}/PluginsAndFeatures/azure-toolkit-for-rider
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
        run: ./gradlew publishPlugin

      # Upload artifact as a release asset
      - name: Upload Release Asset
        working-directory: ${{ github.workspace }}/PluginsAndFeatures/azure-toolkit-for-rider
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} ./build/distributions/*

      # Create a pull request
      - name: Create Pull Request
        if: ${{ steps.properties.outputs.changelog != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          BRANCH="changelog-update-$VERSION"
          LABEL="release changelog"

          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          git checkout -b $BRANCH
          git commit -am "Changelog update - $VERSION"
          git push --set-upstream origin $BRANCH
          
          gh label create "$LABEL" \
            --description "Pull requests with release changelog update" \
            --force \
            || true

          gh pr create \
            --title "Changelog update - \`$VERSION\`" \
            --body "Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version." \
            --label "$LABEL" \
            --head $BRANCH
