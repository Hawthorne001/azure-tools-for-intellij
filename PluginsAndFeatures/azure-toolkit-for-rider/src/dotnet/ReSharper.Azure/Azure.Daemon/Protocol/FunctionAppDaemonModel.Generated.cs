//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.11.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Azure.Model
{
  
  
  /// <summary>
  /// <p>Generated from: FunctionAppDaemonModel.kt:14</p>
  /// </summary>
  public class FunctionAppDaemonModel : RdExtBase
  {
    //fields
    //public fields
    
    /// <summary>
    /// Signal from backend to run a Function App locally.
    /// </summary>
    [NotNull] public void RunFunctionApp(FunctionAppRequest value) => _RunFunctionApp.Fire(value);
    
    /// <summary>
    /// Signal from backend to debug a Function App locally.
    /// </summary>
    [NotNull] public void DebugFunctionApp(FunctionAppRequest value) => _DebugFunctionApp.Fire(value);
    
    /// <summary>
    /// Signal from backend to trigger a Function App.
    /// </summary>
    [NotNull] public void TriggerFunctionApp(FunctionAppRequest value) => _TriggerFunctionApp.Fire(value);
    
    /// <summary>
    /// Request from frontend to read the AzureFunctionsVersion MSBuild property.
    /// </summary>
    [NotNull] public IRdEndpoint<AzureFunctionsVersionRequest, string> GetAzureFunctionsVersion => _GetAzureFunctionsVersion;
    
    //private fields
    [NotNull] private readonly RdSignal<FunctionAppRequest> _RunFunctionApp;
    [NotNull] private readonly RdSignal<FunctionAppRequest> _DebugFunctionApp;
    [NotNull] private readonly RdSignal<FunctionAppRequest> _TriggerFunctionApp;
    [NotNull] private readonly RdCall<AzureFunctionsVersionRequest, string> _GetAzureFunctionsVersion;
    
    //primary constructor
    private FunctionAppDaemonModel(
      [NotNull] RdSignal<FunctionAppRequest> runFunctionApp,
      [NotNull] RdSignal<FunctionAppRequest> debugFunctionApp,
      [NotNull] RdSignal<FunctionAppRequest> triggerFunctionApp,
      [NotNull] RdCall<AzureFunctionsVersionRequest, string> getAzureFunctionsVersion
    )
    {
      if (runFunctionApp == null) throw new ArgumentNullException("runFunctionApp");
      if (debugFunctionApp == null) throw new ArgumentNullException("debugFunctionApp");
      if (triggerFunctionApp == null) throw new ArgumentNullException("triggerFunctionApp");
      if (getAzureFunctionsVersion == null) throw new ArgumentNullException("getAzureFunctionsVersion");
      
      _RunFunctionApp = runFunctionApp;
      _DebugFunctionApp = debugFunctionApp;
      _TriggerFunctionApp = triggerFunctionApp;
      _GetAzureFunctionsVersion = getAzureFunctionsVersion;
      _GetAzureFunctionsVersion.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("runFunctionApp", _RunFunctionApp));
      BindableChildren.Add(new KeyValuePair<string, object>("debugFunctionApp", _DebugFunctionApp));
      BindableChildren.Add(new KeyValuePair<string, object>("triggerFunctionApp", _TriggerFunctionApp));
      BindableChildren.Add(new KeyValuePair<string, object>("getAzureFunctionsVersion", _GetAzureFunctionsVersion));
    }
    //secondary constructor
    internal FunctionAppDaemonModel (
    ) : this (
      new RdSignal<FunctionAppRequest>(FunctionAppRequest.Read, FunctionAppRequest.Write),
      new RdSignal<FunctionAppRequest>(FunctionAppRequest.Read, FunctionAppRequest.Write),
      new RdSignal<FunctionAppRequest>(FunctionAppRequest.Read, FunctionAppRequest.Write),
      new RdCall<AzureFunctionsVersionRequest, string>(AzureFunctionsVersionRequest.Read, AzureFunctionsVersionRequest.Write, ReadStringNullable, WriteStringNullable)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    protected override long SerializationHash => 8720132529663507412L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("FunctionAppDaemonModel (");
      using (printer.IndentCookie()) {
        printer.Print("runFunctionApp = "); _RunFunctionApp.PrintEx(printer); printer.Println();
        printer.Print("debugFunctionApp = "); _DebugFunctionApp.PrintEx(printer); printer.Println();
        printer.Print("triggerFunctionApp = "); _TriggerFunctionApp.PrintEx(printer); printer.Println();
        printer.Print("getAzureFunctionsVersion = "); _GetAzureFunctionsVersion.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionFunctionAppDaemonModelEx
   {
    public static FunctionAppDaemonModel GetFunctionAppDaemonModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("functionAppDaemonModel", () => new FunctionAppDaemonModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: FunctionAppDaemonModel.kt:21</p>
  /// </summary>
  public sealed class AzureFunctionsVersionRequest : IPrintable, IEquatable<AzureFunctionsVersionRequest>
  {
    //fields
    //public fields
    [NotNull] public string ProjectFilePath {get; private set;}
    
    //private fields
    //primary constructor
    public AzureFunctionsVersionRequest(
      [NotNull] string projectFilePath
    )
    {
      if (projectFilePath == null) throw new ArgumentNullException("projectFilePath");
      
      ProjectFilePath = projectFilePath;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string projectFilePath)
    {
      projectFilePath = ProjectFilePath;
    }
    //statics
    
    public static CtxReadDelegate<AzureFunctionsVersionRequest> Read = (ctx, reader) => 
    {
      var projectFilePath = reader.ReadString();
      var _result = new AzureFunctionsVersionRequest(projectFilePath);
      return _result;
    };
    
    public static CtxWriteDelegate<AzureFunctionsVersionRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ProjectFilePath);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((AzureFunctionsVersionRequest) obj);
    }
    public bool Equals(AzureFunctionsVersionRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ProjectFilePath == other.ProjectFilePath;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ProjectFilePath.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("AzureFunctionsVersionRequest (");
      using (printer.IndentCookie()) {
        printer.Print("projectFilePath = "); ProjectFilePath.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: FunctionAppDaemonModel.kt:15</p>
  /// </summary>
  public sealed class FunctionAppRequest : IPrintable, IEquatable<FunctionAppRequest>
  {
    //fields
    //public fields
    [CanBeNull] public string MethodName {get; private set;}
    [CanBeNull] public string FunctionName {get; private set;}
    [NotNull] public string ProjectFilePath {get; private set;}
    
    //private fields
    //primary constructor
    public FunctionAppRequest(
      [CanBeNull] string methodName,
      [CanBeNull] string functionName,
      [NotNull] string projectFilePath
    )
    {
      if (projectFilePath == null) throw new ArgumentNullException("projectFilePath");
      
      MethodName = methodName;
      FunctionName = functionName;
      ProjectFilePath = projectFilePath;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([CanBeNull] out string methodName, [CanBeNull] out string functionName, [NotNull] out string projectFilePath)
    {
      methodName = MethodName;
      functionName = FunctionName;
      projectFilePath = ProjectFilePath;
    }
    //statics
    
    public static CtxReadDelegate<FunctionAppRequest> Read = (ctx, reader) => 
    {
      var methodName = ReadStringNullable(ctx, reader);
      var functionName = ReadStringNullable(ctx, reader);
      var projectFilePath = reader.ReadString();
      var _result = new FunctionAppRequest(methodName, functionName, projectFilePath);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<FunctionAppRequest> Write = (ctx, writer, value) => 
    {
      WriteStringNullable(ctx, writer, value.MethodName);
      WriteStringNullable(ctx, writer, value.FunctionName);
      writer.Write(value.ProjectFilePath);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((FunctionAppRequest) obj);
    }
    public bool Equals(FunctionAppRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(MethodName, other.MethodName) && Equals(FunctionName, other.FunctionName) && ProjectFilePath == other.ProjectFilePath;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (MethodName != null ? MethodName.GetHashCode() : 0);
        hash = hash * 31 + (FunctionName != null ? FunctionName.GetHashCode() : 0);
        hash = hash * 31 + ProjectFilePath.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("FunctionAppRequest (");
      using (printer.IndentCookie()) {
        printer.Print("methodName = "); MethodName.PrintEx(printer); printer.Println();
        printer.Print("functionName = "); FunctionName.PrintEx(printer); printer.Println();
        printer.Print("projectFilePath = "); ProjectFilePath.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
