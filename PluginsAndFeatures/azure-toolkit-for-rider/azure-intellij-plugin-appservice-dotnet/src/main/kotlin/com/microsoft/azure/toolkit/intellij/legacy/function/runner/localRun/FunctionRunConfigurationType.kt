/*
 * Copyright 2018-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the MIT license.
 */

package com.microsoft.azure.toolkit.intellij.legacy.function.runner.localRun

import com.intellij.execution.RunManager
import com.intellij.execution.RunnerAndConfigurationSettings
import com.intellij.execution.configurations.ConfigurationTypeBase
import com.intellij.openapi.project.Project
import com.intellij.util.execution.ParametersListUtil
import com.jetbrains.rd.util.lifetime.Lifetime
import com.jetbrains.rider.model.ProjectOutput
import com.jetbrains.rider.model.RunnableProject
import com.jetbrains.rider.model.RunnableProjectKind
import com.jetbrains.rider.run.AutoGeneratedRunConfigurationManager
import com.jetbrains.rider.run.configurations.IRunConfigurationWithDefault
import com.jetbrains.rider.run.configurations.IRunnableProjectConfigurationType
import com.jetbrains.rider.run.configurations.RunConfigurationHelper.hasConfigurationForNameAndTypeId
import com.jetbrains.rider.run.configurations.launchSettings.LaunchSettingsJson
import com.jetbrains.rider.run.configurations.launchSettings.LaunchSettingsJsonService
import com.microsoft.azure.toolkit.ide.common.icon.AzureIcons
import com.microsoft.azure.toolkit.intellij.common.IntelliJAzureIcons
import com.microsoft.azure.toolkit.intellij.legacy.function.daemon.AzureRunnableProjectKinds

class FunctionRunConfigurationType : ConfigurationTypeBase(
    ID,
    "Azure - Run Function App",
    "Azure Run Function App configuration",
    IntelliJAzureIcons.getIcon(AzureIcons.FunctionApp.RUN)
), IRunnableProjectConfigurationType, IRunConfigurationWithDefault {
    companion object {
        const val ID = "AzureFunctionAppRun"
    }

    val factory = FunctionRunConfigurationFactory(this)

    init {
        addFactory(factory)
    }

    override fun isApplicable(kind: RunnableProjectKind) = kind == AzureRunnableProjectKinds.AzureFunctions

    override suspend fun tryCreateDefault(
        project: Project,
        lifetime: Lifetime,
        projects: List<RunnableProject>,
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
        runManager: RunManager
    ): List<Pair<RunnableProject, RunnerAndConfigurationSettings>> {
        val functionProjects = projects.filter { it.kind == AzureRunnableProjectKinds.AzureFunctions }
        if (functionProjects.isEmpty()) return emptyList()

        val result = mutableListOf<Pair<RunnableProject, RunnerAndConfigurationSettings>>()

        functionProjects.forEach { runnableProject ->
            LaunchSettingsJsonService.loadLaunchSettings(runnableProject)?.profiles?.forEach { profile ->
                if (!profile.value.commandName.equals("Project", true))
                    return@forEach

                if (hasRunConfigurationEverBeenGenerated(
                        autoGeneratedRunConfigurationManager,
                        runnableProject.projectFilePath,
                        profile.key
                    )
                ) return@forEach

                val configurationName =
                    if (runnableProject.name == profile.key) profile.key
                    else "${runnableProject.name}: ${profile.key}"

                if (runManager.hasConfigurationForNameAndTypeId(configurationName, ID) ||
                    runManager.hasConfigurationForNameAndTypeId(runnableProject.name, ID)
                )
                    return@forEach

                val configuration = generateConfigurationForProfile(
                    configurationName,
                    runnableProject,
                    profile.key,
                    runManager
                )

                runManager.addConfiguration(configuration)
                markProjectAsAutoGenerated(
                    autoGeneratedRunConfigurationManager,
                    runnableProject.projectFilePath,
                    profile.key
                )
                result.add(runnableProject to configuration)
            }
        }

        return result.toList()
    }

    private fun hasRunConfigurationEverBeenGenerated(
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
        projectFilePath: String,
        profileName: String
    ) = autoGeneratedRunConfigurationManager.hasRunConfigurationEverBeenGenerated(
        projectFilePath,
        mapOf(
            "azureFunctionProfileName" to profileName,
        )
    )

    private fun markProjectAsAutoGenerated(
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
        projectFilePath: String,
        profileName: String
    ) {
        autoGeneratedRunConfigurationManager.markProjectAsAutoGenerated(
            projectFilePath,
            mapOf(
                "azureFunctionProfileName" to profileName,
            )
        )
    }

    private fun generateConfigurationForProfile(
        name: String,
        runnableProject: RunnableProject,
        profile: String,
        runManager: RunManager
    ): RunnerAndConfigurationSettings {
        val settings = runManager.createConfiguration(name, factory)
        (settings.configuration as? FunctionRunConfiguration)?.parameters?.apply {
            projectFilePath = runnableProject.projectFilePath
            profileName = profile
            val projectOutput = runnableProject.projectOutputs.firstOrNull()
            projectTfm = projectOutput?.tfm?.presentableName ?: ""
            functionNames = ""
            val launchProfile = getLaunchProfileByName(runnableProject, profile)
            if (launchProfile != null) {
                projectArguments = getArguments(launchProfile.second, projectOutput)
                trackArguments = true
                workingDirectory = getWorkingDirectory(launchProfile.second, projectOutput)
                trackWorkingDirectory = true
                envs = getEnvironmentVariables(launchProfile.second)
                trackEnvs = true
                val applicationUrl = getApplicationUrl(launchProfile.second)
                startBrowserParameters.apply {
                    url = applicationUrl ?: ""
                    startAfterLaunch = launchProfile.second.launchBrowser
                }
                trackUrl = true
            }
        }

        return settings
    }

    private fun getLaunchProfileByName(
        runnableProject: RunnableProject,
        launchProfileName: String?
    ): Pair<String, LaunchSettingsJson.Profile>? {
        if (launchProfileName == null) return null
        val launchProfiles = LaunchSettingsJsonService.loadLaunchSettings(runnableProject)
            ?.profiles
            ?.filter { it.value.commandName.equals("Project", true) }
            ?: return null
        val profileByName = launchProfiles[launchProfileName] ?: return null
        return launchProfileName to profileByName
    }

    private fun getArguments(profile: LaunchSettingsJson.Profile?, projectOutput: ProjectOutput?): String {
        val defaultArguments = projectOutput?.defaultArguments
        return if (defaultArguments.isNullOrEmpty()) profile?.commandLineArgs ?: ""
        else {
            val parametersList = ParametersListUtil.join(defaultArguments)
            val commandLineArgs = profile?.commandLineArgs
            if (commandLineArgs != null) {
                "$parametersList $commandLineArgs"
            } else {
                parametersList
            }
        }
    }

    private fun getWorkingDirectory(profile: LaunchSettingsJson.Profile?, projectOutput: ProjectOutput?): String {
        return profile?.workingDirectory ?: projectOutput?.workingDirectory ?: ""
    }

    private fun getEnvironmentVariables(profile: LaunchSettingsJson.Profile): Map<String, String> {
        val environmentVariables = profile.environmentVariables
            ?.mapNotNull { it.value?.let { value -> it.key to value } }
            ?.toMap()
            ?: mapOf()

        return environmentVariables
    }

    private fun getApplicationUrl(profile: LaunchSettingsJson.Profile): String? {
        val applicationUrl = profile.applicationUrl
        return applicationUrl?.substringBefore(';')
    }
}